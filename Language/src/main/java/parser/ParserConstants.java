/* Generated by: ParserGeneratorCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DOT = 7;
  /** RegularExpression Id. */
  int COMA = 8;
  /** RegularExpression Id. */
  int ADD = 9;
  /** RegularExpression Id. */
  int SUB = 10;
  /** RegularExpression Id. */
  int MULT = 11;
  /** RegularExpression Id. */
  int DIV = 12;
  /** RegularExpression Id. */
  int EXCL = 13;
  /** RegularExpression Id. */
  int TILDE = 14;
  /** RegularExpression Id. */
  int CONJ = 15;
  /** RegularExpression Id. */
  int DISJ = 16;
  /** RegularExpression Id. */
  int EQUALS = 17;
  /** RegularExpression Id. */
  int ASSIGNMENT = 18;
  /** RegularExpression Id. */
  int EQEQ = 19;
  /** RegularExpression Id. */
  int EXCL_EQUALS = 20;
  /** RegularExpression Id. */
  int GREATER = 21;
  /** RegularExpression Id. */
  int LESS = 22;
  /** RegularExpression Id. */
  int GR_EQUALS = 23;
  /** RegularExpression Id. */
  int LE_EQUALS = 24;
  /** RegularExpression Id. */
  int ARROW = 25;
  /** RegularExpression Id. */
  int SEMICOLON = 26;
  /** RegularExpression Id. */
  int SCSC = 27;
  /** RegularExpression Id. */
  int COLON = 28;
  /** RegularExpression Id. */
  int LPAR = 29;
  /** RegularExpression Id. */
  int RPAR = 30;
  /** RegularExpression Id. */
  int LCUR = 31;
  /** RegularExpression Id. */
  int RCUR = 32;
  /** RegularExpression Id. */
  int LET = 33;
  /** RegularExpression Id. */
  int END = 34;
  /** RegularExpression Id. */
  int IN = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int FALSE = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int FLOAT = 39;
  /** RegularExpression Id. */
  int NEW = 40;
  /** RegularExpression Id. */
  int AS = 41;
  /** RegularExpression Id. */
  int IF = 42;
  /** RegularExpression Id. */
  int THEN = 43;
  /** RegularExpression Id. */
  int ELSE = 44;
  /** RegularExpression Id. */
  int WHILE = 45;
  /** RegularExpression Id. */
  int DO = 46;
  /** RegularExpression Id. */
  int INSTANCEOF = 47;
  /** RegularExpression Id. */
  int PRINTLN = 48;
  /** RegularExpression Id. */
  int PRINT = 49;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 50;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 51;
  /** RegularExpression Id. */
  int IDENTIFIER = 52;
  /** RegularExpression Id. */
  int LETTER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"!\"",
    "\"~\"",
    "\"&&\"",
    "\"||\"",
    "\"=\"",
    "\":=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"->\"",
    "\";\"",
    "\";;\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"let\"",
    "\"end\"",
    "\"in\"",
    "\"true\"",
    "\"false\"",
    "\"int\"",
    "\"float\"",
    "\"new\"",
    "\"as\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"instanceof\"",
    "\"println\"",
    "\"print\"",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
